---
import { protectAdminPage } from "../../lib/adminSecurity";
import "../../styles/global.css";

// Proteger p√°gina de administraci√≥n
const protection = protectAdminPage(Astro.request);
if (protection instanceof Response) {
  return protection;
}
const user = protection;

// P√°gina para gestionar series existentes
import { getSeries } from "../../lib/mongo";

let series: any[] = [];
let error = "";

try {
  series = await getSeries();
} catch (err) {
  error = "Error cargando series";
}
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gestionar Series - Admin SeriesGuide</title>
  </head>
  <body class="bg-gray-900 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div
        class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-8 gap-4"
      >
        <div>
          <h1 class="text-2xl sm:text-3xl font-bold text-white mb-2">
            Gestionar Series
          </h1>
          <p class="text-gray-400 text-sm sm:text-base">
            Edita, elimina y administra las series existentes
          </p>
        </div>
        <div class="flex flex-col sm:flex-row gap-3 sm:gap-4">
          <a
            href="/admin/add-serie"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors text-center"
          >
            + Nueva Serie
          </a>
          <a
            href="/admin"
            class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors text-center"
          >
            ‚Üê Volver
          </a>
        </div>
      </div>

      <!-- Estad√≠sticas -->
      <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <div class="bg-gray-800 p-4 sm:p-6 rounded-lg border border-gray-700">
          <h3 class="text-xs sm:text-sm font-medium text-gray-400 mb-2">Total Series</h3>
          <p class="text-2xl sm:text-3xl font-bold text-white">{series.length}</p>
        </div>
        <div class="bg-gray-800 p-4 sm:p-6 rounded-lg border border-gray-700">
          <h3 class="text-xs sm:text-sm font-medium text-gray-400 mb-2">En Emisi√≥n</h3>
          <p class="text-2xl sm:text-3xl font-bold text-green-400">
            {series.filter((s) => s.status === "ongoing").length}
          </p>
        </div>
        <div class="bg-gray-800 p-4 sm:p-6 rounded-lg border border-gray-700">
          <h3 class="text-xs sm:text-sm font-medium text-gray-400 mb-2">Finalizadas</h3>
          <p class="text-2xl sm:text-3xl font-bold text-blue-400">
            {series.filter((s) => s.status === "ended").length}
          </p>
        </div>
        <div class="bg-gray-800 p-4 sm:p-6 rounded-lg border border-gray-700">
          <h3 class="text-xs sm:text-sm font-medium text-gray-400 mb-2">Con LGBTIQ+</h3>
          <p class="text-2xl sm:text-3xl font-bold text-pink-400">
            {series.filter((s) => s.lgbtqContent).length}
          </p>
        </div>
      </div>

      <!-- Buscador -->
      <div class="mb-6">
        <input
          type="text"
          id="search"
          placeholder="Buscar series por t√≠tulo, g√©nero, red..."
          class="w-full bg-gray-800 text-white rounded-lg px-4 py-3 border border-gray-700 focus:border-blue-500 focus:outline-none"
        />
      </div>

      <!-- Lista de Series -->
      {
        error ? (
          <div class="bg-red-500 text-white p-4 rounded-lg mb-6">{error}</div>
        ) : (
          <div class="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
            <!-- Vista de escritorio -->
            <div class="hidden md:block overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-700">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Serie
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      A√±o
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Estado
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Rating
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Temporadas
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-700" id="seriesTable">
                  {series.map((serie) => (
                    <tr
                      class="hover:bg-gray-700 transition-colors serie-row"
                      data-serie={JSON.stringify(serie)}
                    >
                      <td class="px-6 py-4">
                        <div class="flex items-center">
                          {serie.posterUrl && (
                            <img
                              class="h-12 w-8 rounded object-cover mr-3"
                              src={serie.posterUrl}
                              alt={serie.title}
                            />
                          )}
                          <div class="min-w-0 flex-1">
                            <div class="text-sm font-medium text-white flex items-center gap-2">
                              <span>{serie.title}</span>
                              {serie.lgbtqContent && (
                                <span
                                  class="text-pink-400"
                                  title="Contenido LGBTIQ+"
                                >
                                  üè≥Ô∏è‚Äçüåà
                                </span>
                              )}
                            </div>
                            <div class="text-sm text-gray-400">
                              {serie.network}
                            </div>
                            <div class="text-xs text-gray-500">
                              {serie.genre?.slice(0, 2).join(", ")}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {serie.startYear}
                        {serie.endYear && ` - ${serie.endYear}`}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span
                          class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            serie.status === "ongoing"
                              ? "bg-green-900 text-green-200"
                              : serie.status === "ended"
                                ? "bg-blue-900 text-blue-200"
                                : "bg-red-900 text-red-200"
                          }`}
                        >
                          {serie.status === "ongoing"
                            ? "En emisi√≥n"
                            : serie.status === "ended"
                              ? "Finalizada"
                              : "Cancelada"}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {serie.imdbRating}/10
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {serie.totalSeasons} temp. / {serie.totalEpisodes} ep.
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <div class="flex space-x-2">
                          <button
                            data-action="edit"
                            data-id={serie._id}
                            class="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1 rounded text-xs font-medium transition-colors"
                          >
                            Editar
                          </button>
                          <button
                            data-action="delete"
                            data-id={serie._id}
                            data-title={serie.title}
                            class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-xs font-medium transition-colors"
                          >
                            Eliminar
                          </button>
                          <a
                            href={`/series/${serie.slug}`}
                            target="_blank"
                            class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-xs font-medium transition-colors"
                          >
                            Ver
                          </a>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <!-- Vista m√≥vil -->
            <div class="md:hidden divide-y divide-gray-700" id="seriesTableMobile">
              {series.map((serie) => (
                <div
                  class="p-4 serie-row"
                  data-serie={JSON.stringify(serie)}
                >
                  <div class="flex items-start gap-3 mb-3">
                    {serie.posterUrl && (
                      <img
                        class="h-16 w-10 rounded object-cover flex-shrink-0"
                        src={serie.posterUrl}
                        alt={serie.title}
                      />
                    )}
                    <div class="flex-1 min-w-0">
                      <div class="flex items-center gap-2 mb-1">
                        <h3 class="text-white font-medium text-sm leading-tight">
                          {serie.title}
                        </h3>
                        {serie.lgbtqContent && (
                          <span
                            class="text-pink-400 flex-shrink-0"
                            title="Contenido LGBTIQ+"
                          >
                            üè≥Ô∏è‚Äçüåà
                          </span>
                        )}
                      </div>
                      <p class="text-gray-400 text-xs mb-1">
                        {serie.network}
                      </p>
                      <p class="text-gray-500 text-xs">
                        {serie.genre?.slice(0, 2).join(", ")}
                      </p>
                    </div>
                    <span
                      class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full flex-shrink-0 ${
                        serie.status === "ongoing"
                          ? "bg-green-900 text-green-200"
                          : serie.status === "ended"
                            ? "bg-blue-900 text-blue-200"
                            : "bg-red-900 text-red-200"
                      }`}
                    >
                      {serie.status === "ongoing"
                        ? "En emisi√≥n"
                        : serie.status === "ended"
                          ? "Finalizada"
                          : "Cancelada"}
                    </span>
                  </div>
                  
                  <div class="flex justify-between items-center text-xs text-gray-400 mb-3">
                    <span>
                      {serie.startYear}
                      {serie.endYear && ` - ${serie.endYear}`}
                    </span>
                    <div class="flex gap-3">
                      <span>‚≠ê {serie.imdbRating}/10</span>
                      <span>üì∫ {serie.totalSeasons}T / {serie.totalEpisodes}E</span>
                    </div>
                  </div>
                  
                  <div class="flex flex-wrap gap-2 mb-3">
                    {serie.platforms && serie.platforms.slice(0, 4).map((platform: any) => (
                      <span class="bg-gray-100 px-2 py-1 rounded-md text-xs font-medium">
                        {platform.name}
                        {platform.isPremium && ' üíé'}
                      </span>
                    ))}
                    {serie.platforms && serie.platforms.length > 4 && (
                      <span class="text-xs text-gray-500">+{serie.platforms.length - 4}</span>
                    )}
                  </div>
                  
                  <div class="flex flex-wrap gap-2">
                    <button
                      data-action="edit"
                      data-id={serie._id}
                      class="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1.5 rounded text-xs font-medium transition-colors"
                    >
                      Editar
                    </button>
                    <button
                      data-action="delete"
                      data-id={serie._id}
                      data-title={serie.title}
                      class="bg-red-600 hover:bg-red-700 text-white px-3 py-1.5 rounded text-xs font-medium transition-colors"
                    >
                      Eliminar
                    </button>
                    <a
                      href={`/series/${serie.slug}`}
                      target="_blank"
                      class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded text-xs font-medium transition-colors"
                    >
                      Ver
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }
    </div>

    <!-- Modal de Edici√≥n -->
    <div
      id="editModal"
      class="hidden fixed inset-0 bg-black bg-opacity-50 z-50"
    >
      <div
        class="flex items-start justify-center min-h-screen p-4 pt-8 sm:pt-4"
      >
        <div
          class="bg-gray-800 rounded-lg p-4 sm:p-6 w-full max-w-4xl max-h-[85vh] overflow-y-auto"
        >
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg sm:text-xl font-bold text-white">
              Editar Serie
            </h2>
            <div class="flex items-center gap-2">
              <!-- Botones de acci√≥n m√≥vil -->
              <button
                type="button"
                onclick="closeEditModal()"
                class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1.5 rounded text-sm font-medium transition-colors sm:hidden"
              >
                Cancelar
              </button>
              <button
                type="button"
                onclick="document.getElementById('editForm').requestSubmit()"
                class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded text-sm font-medium transition-colors sm:hidden"
              >
                Guardar
              </button>
              <!-- Bot√≥n X para cerrar -->
              <button
                onclick="closeEditModal()"
                class="text-gray-400 hover:text-white text-2xl sm:text-3xl p-2 sm:p-1 min-w-[40px] min-h-[40px] flex items-center justify-center"
                aria-label="Cerrar modal"
              >
                &times;
              </button>
            </div>
          </div>

          <form id="editForm" class="space-y-4">
            <input type="hidden" id="editId" />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >T√≠tulo</label
                >
                <input
                  type="text"
                  id="editTitle"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >Slug</label
                >
                <input
                  type="text"
                  id="editSlug"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                  required
                />
              </div>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1"
                >Descripci√≥n</label
              >
              <textarea
                id="editDescription"
                class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                rows="3"></textarea>
            </div>

            <!-- Campo G√©neros -->
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-1">
                G√©neros (separados por comas)
              </label>
              <input
                type="text"
                id="editGenres"
                placeholder="Drama, Acci√≥n, LGBTIQ+, etc."
                class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
              />
              <p class="text-xs text-gray-500 mt-1">
                üí° Tip: Usa g√©neros como "LGBTIQ+", "LGBTIQ+ Trans", "LGBTIQ+
                L√©sbico" para subtipos espec√≠ficos
              </p>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >Red/Canal</label
                >
                <input
                  type="text"
                  id="editNetwork"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >Estado</label
                >
                <select
                  id="editStatus"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                >
                  <option value="ongoing">En emisi√≥n</option>
                  <option value="ended">Finalizada</option>
                  <option value="cancelled">Cancelada</option>
                </select>
              </div>
            </div>

            <!-- Campo LGBTIQ+ -->
            <div class="bg-gray-700 p-4 rounded-lg">
              <div class="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="editLgbtqContent"
                  class="w-5 h-5 text-pink-600 bg-gray-600 border-gray-500 rounded focus:ring-pink-500 focus:ring-2"
                />
                <label
                  for="editLgbtqContent"
                  class="text-sm font-medium text-gray-300 flex items-center space-x-2"
                >
                  <span>üè≥Ô∏è‚Äçüåà</span>
                  <span>Contenido LGBTIQ+ destacado</span>
                </label>
              </div>
              <p class="text-xs text-gray-500 mt-2 ml-8">
                Marca si la serie tiene representaci√≥n LGBTIQ+ como tema
                principal o secundario importante
              </p>
            </div>

            <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >A√±o inicio</label
                >
                <input
                  type="number"
                  id="editStartYear"
                  min="1900"
                  max="2030"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >A√±o fin</label
                >
                <input
                  type="number"
                  id="editEndYear"
                  min="1900"
                  max="2030"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >Temporadas</label
                >
                <input
                  type="number"
                  id="editTotalSeasons"
                  min="1"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >Episodios</label
                >
                <input
                  type="number"
                  id="editTotalEpisodes"
                  min="1"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >IMDB ID</label
                >
                <input
                  type="text"
                  id="editImdbId"
                  placeholder="tt1234567"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >Rating IMDB</label
                >
                <input
                  type="number"
                  step="0.1"
                  min="0"
                  max="10"
                  id="editImdbRating"
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >URL Poster</label
                >
                <input
                  type="url"
                  id="editPosterUrl"
                  placeholder="https://..."
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >URL Backdrop</label
                >
                <input
                  type="url"
                  id="editBackdropUrl"
                  placeholder="https://..."
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-300 mb-1"
                  >URL Trailer</label
                >
                <input
                  type="url"
                  id="editTrailerUrl"
                  placeholder="https://youtube.com/watch?v=..."
                  class="w-full bg-gray-700 text-white rounded px-3 py-2 border border-gray-600 focus:border-blue-500 focus:outline-none"
                />
              </div>
            </div>

            <!-- Campo Plataformas -->
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-2">
                Plataformas donde est√° disponible
              </label>
              <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-netflix"
                    data-platform="Netflix"
                    class="w-4 h-4 text-red-600 bg-gray-700 border-gray-600 rounded focus:ring-red-500"
                  />
                  <label for="platform-netflix" class="text-sm text-gray-300">
                    Netflix
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-hbo"
                    data-platform="HBO Max"
                    class="w-4 h-4 text-purple-600 bg-gray-700 border-gray-600 rounded focus:ring-purple-500"
                  />
                  <label for="platform-hbo" class="text-sm text-gray-300">
                    HBO Max
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-prime"
                    data-platform="Prime Video"
                    class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                  />
                  <label for="platform-prime" class="text-sm text-gray-300">
                    Prime Video
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-disney"
                    data-platform="Disney+"
                    class="w-4 h-4 text-blue-500 bg-gray-700 border-gray-600 rounded focus:ring-blue-400"
                  />
                  <label for="platform-disney" class="text-sm text-gray-300">
                    Disney+
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-apple"
                    data-platform="Apple TV+"
                    class="w-4 h-4 text-gray-500 bg-gray-700 border-gray-600 rounded focus:ring-gray-400"
                  />
                  <label for="platform-apple" class="text-sm text-gray-300">
                    Apple TV+
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-paramount"
                    data-platform="Paramount+"
                    class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                  />
                  <label for="platform-paramount" class="text-sm text-gray-300">
                    Paramount+
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-peacock"
                    data-platform="Peacock"
                    class="w-4 h-4 text-yellow-600 bg-gray-700 border-gray-600 rounded focus:ring-yellow-500"
                  />
                  <label for="platform-peacock" class="text-sm text-gray-300">
                    Peacock
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-hulu"
                    data-platform="Hulu"
                    class="w-4 h-4 text-green-600 bg-gray-700 border-gray-600 rounded focus:ring-green-500"
                  />
                  <label for="platform-hulu" class="text-sm text-gray-300">
                    Hulu
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-max"
                    data-platform="Max"
                    class="w-4 h-4 text-purple-600 bg-gray-700 border-gray-600 rounded focus:ring-purple-500"
                  />
                  <label for="platform-max" class="text-sm text-gray-300">
                    Max
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-starz"
                    data-platform="Starz"
                    class="w-4 h-4 text-black bg-gray-700 border-gray-600 rounded focus:ring-gray-500"
                  />
                  <label for="platform-starz" class="text-sm text-gray-300">
                    Starz
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-showtime"
                    data-platform="Showtime"
                    class="w-4 h-4 text-red-600 bg-gray-700 border-gray-600 rounded focus:ring-red-500"
                  />
                  <label for="platform-showtime" class="text-sm text-gray-300">
                    Showtime
                  </label>
                </div>
                <div class="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="platform-other"
                    data-platform="Otro"
                    class="w-4 h-4 text-gray-600 bg-gray-700 border-gray-600 rounded focus:ring-gray-500"
                  />
                  <label for="platform-other" class="text-sm text-gray-300">
                    Otro
                  </label>
                </div>
              </div>
              <p class="text-xs text-gray-500 mt-2">
                Selecciona todas las plataformas donde est√° disponible la serie
              </p>
            </div>

            <div
              class="flex flex-col sm:flex-row justify-end gap-3 pt-4 border-t border-gray-700"
            >
              <button
                type="button"
                onclick="closeEditModal()"
                class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-colors order-2 sm:order-1"
              >
                Cancelar
              </button>
              <button
                type="submit"
                class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors order-1 sm:order-2"
              >
                Guardar Cambios
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script>
      // @ts-nocheck - JavaScript puro sin tipos
      
      // Suprimir errores de extensiones del navegador
      window.addEventListener('error', function(e) {
        // Ignorar errores de extensiones del navegador
        if (e.message && e.message.includes('message channel closed')) {
          e.preventDefault();
          return false;
        }
      });

      // Suprimir errores de promesas no manejadas relacionados con extensiones
      window.addEventListener('unhandledrejection', function(e) {
        if (e.reason && e.reason.message && e.reason.message.includes('message channel closed')) {
          e.preventDefault();
          return false;
        }
      });

      // Funciones globales para el modal
      window.closeEditModal = function () {
        const modal = document.getElementById("editModal");
        if (modal) {
          modal.classList.add("hidden");
          modal.style.display = "none";
        }
      };

      // Event delegation para los botones
      document.addEventListener("click", function (e) {
        if (e.target.dataset.action === "edit") {
          editSerie(e.target.dataset.id);
        } else if (e.target.dataset.action === "delete") {
          deleteSerie(e.target.dataset.id, e.target.dataset.title);
        }
      });

      // B√∫squeda en tiempo real
      const searchInput = document.getElementById("search");
      if (searchInput) {
        searchInput.addEventListener("input", function (e) {
          const target = e.target;
          if (target && target instanceof HTMLInputElement) {
            const searchTerm = target.value.toLowerCase();
            const rows = document.querySelectorAll(".serie-row");

            rows.forEach((row) => {
              const serieDataAttr = row.getAttribute("data-serie");
              if (serieDataAttr) {
                const serieData = JSON.parse(serieDataAttr);
                const searchText =
                  `${serieData.title} ${serieData.network} ${(serieData.genre || []).join(" ")}`.toLowerCase();

                if (searchText.includes(searchTerm)) {
                  row.style.display = "";
                } else {
                  row.style.display = "none";
                }
              }
            });
          }
        });
      }

      // Funciones de gesti√≥n
      function editSerie(id) {
        const rows = document.querySelectorAll(".serie-row");
        let serieData = null;

        rows.forEach((row) => {
          const dataAttr = row.getAttribute("data-serie");
          if (dataAttr) {
            const data = JSON.parse(dataAttr);
            if (data._id === id) {
              serieData = data;
            }
          }
        });

        if (!serieData) return;

        // Llenar el formulario de edici√≥n con validaci√≥n de elementos
        const setInputValue = (id, value) => {
          const element = document.getElementById(id);
          if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
            element.value = value || "";
          }
        };

        const setSelectValue = (id, value) => {
          const element = document.getElementById(id);
          if (element instanceof HTMLSelectElement) {
            element.value = value || "";
          }
        };

        const setCheckboxValue = (id, value) => {
          const element = document.getElementById(id);
          if (element instanceof HTMLInputElement && element.type === "checkbox") {
            element.checked = value || false;
          }
        };

        setInputValue("editId", serieData._id);
        setInputValue("editTitle", serieData.title);
        setInputValue("editSlug", serieData.slug);
        setInputValue("editDescription", serieData.description);
        setInputValue("editGenres", (serieData.genre || []).join(", "));
        setInputValue("editNetwork", serieData.network);
        setSelectValue("editStatus", serieData.status);
        setInputValue("editStartYear", serieData.startYear);
        setInputValue("editEndYear", serieData.endYear);
        setInputValue("editTotalSeasons", serieData.totalSeasons);
        setInputValue("editTotalEpisodes", serieData.totalEpisodes);
        setInputValue("editImdbId", serieData.imdbId);
        setInputValue("editImdbRating", serieData.imdbRating);
        setInputValue("editPosterUrl", serieData.posterUrl);
        setInputValue("editBackdropUrl", serieData.backdropUrl);
        setInputValue("editTrailerUrl", serieData.trailerUrl);
        setCheckboxValue("editLgbtqContent", serieData.lgbtqContent);

        // Limpiar y seleccionar plataformas
        document.querySelectorAll('[data-platform]').forEach(function(checkbox) {
          if (checkbox instanceof HTMLInputElement) {
            checkbox.checked = false;
          }
        });
        
        if (serieData.platforms && Array.isArray(serieData.platforms)) {
          serieData.platforms.forEach(function(platform) {
            const checkbox = document.querySelector('[data-platform="' + platform.name + '"]');
            if (checkbox instanceof HTMLInputElement) {
              checkbox.checked = true;
            }
          });
        }

        // Mostrar modal
        const modal = document.getElementById("editModal");
        if (modal) {
          modal.classList.remove("hidden");
          modal.style.display = "flex";
        }
      }

      // Funciones globales para el modal
      window.closeEditModal = function () {
        const modal = document.getElementById("editModal");
        if (modal) {
          modal.classList.add("hidden");
          modal.style.display = "none";
        }
      };

      function deleteSerie(id, title) {
        if (
          !confirm(
            `¬øEst√°s seguro de que quieres eliminar la serie "${title}"? Esta acci√≥n no se puede deshacer.`
          )
        ) {
          return;
        }

        fetch("/api/series", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              alert("Serie eliminada exitosamente");
              location.reload();
            } else {
              alert(
                "Error eliminando la serie: " +
                  (data.error || "Error desconocido")
              );
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("Error eliminando la serie");
          });
      }

      // Manejar env√≠o del formulario de edici√≥n
      const editForm = document.getElementById("editForm");
      if (editForm) {
        editForm.addEventListener("submit", function (e) {
          e.preventDefault();

          // Funciones auxiliares para obtener valores de elementos
          const getInputValue = (id) => {
            const element = document.getElementById(id);
            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
              return element.value;
            }
            return "";
          };

          const getSelectValue = (id) => {
            const element = document.getElementById(id);
            if (element instanceof HTMLSelectElement) {
              return element.value;
            }
            return "";
          };

          const getCheckboxValue = (id) => {
            const element = document.getElementById(id);
            if (element instanceof HTMLInputElement && element.type === "checkbox") {
              return element.checked;
            }
            return false;
          };

          // Procesar g√©neros
          const genresInput = getInputValue("editGenres");
          const genres = genresInput
            .split(",")
            .map((g) => g.trim())
            .filter((g) => g.length > 0);

          // Procesar plataformas seleccionadas
          const selectedPlatforms = [];
          document.querySelectorAll('[data-platform]').forEach(checkbox => {
            if (checkbox instanceof HTMLInputElement && checkbox.checked) {
              const platformName = checkbox.dataset.platform;
              if (platformName) {
                selectedPlatforms.push({
                  name: platformName,
                  available: true,
                  isPremium: true
                });
              }
            }
          });

          const data = {
            id: getInputValue("editId"),
            title: getInputValue("editTitle"),
            slug: getInputValue("editSlug"),
            description: getInputValue("editDescription"),
            genre: genres,
            network: getInputValue("editNetwork"),
            status: getSelectValue("editStatus"),
            startYear: parseInt(getInputValue("editStartYear")),
            endYear: getInputValue("editEndYear")
              ? parseInt(getInputValue("editEndYear"))
              : null,
            totalSeasons: parseInt(getInputValue("editTotalSeasons")),
            totalEpisodes: parseInt(getInputValue("editTotalEpisodes")),
            imdbId: getInputValue("editImdbId"),
            imdbRating: parseFloat(getInputValue("editImdbRating")),
            posterUrl: getInputValue("editPosterUrl"),
            backdropUrl: getInputValue("editBackdropUrl"),
            trailerUrl: getInputValue("editTrailerUrl"),
            lgbtqContent: getCheckboxValue("editLgbtqContent"),
            platforms: selectedPlatforms,
          };

          fetch("/api/series", {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                alert("Serie actualizada exitosamente");
                location.reload();
              } else {
                alert(
                  "Error actualizando la serie: " +
                    (data.error || "Error desconocido")
                );
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              alert("Error actualizando la serie");
            });
        });
      }

      // Auto-generar slug al cambiar el t√≠tulo
      const editTitle = document.getElementById("editTitle");
      if (editTitle) {
        editTitle.addEventListener("input", function (e) {
          const target = e.target;
          if (target instanceof HTMLInputElement) {
            const title = target.value;
            const slug = title
              .toLowerCase()
              .replace(/[^a-z0-9\s-]/g, "")
              .replace(/\s+/g, "-")
              .replace(/-+/g, "-")
              .trim();
            
            const editSlug = document.getElementById("editSlug");
            if (editSlug instanceof HTMLInputElement) {
              editSlug.value = slug;
            }
          }
        });
      }

      // Cerrar modal al hacer clic fuera de √©l
      const editModal = document.getElementById("editModal");
      if (editModal) {
        editModal.addEventListener("click", function (e) {
          if (e.target === this) {
            window.closeEditModal();
          }
        });
      }

      // Cerrar modal con tecla Escape
      document.addEventListener("keydown", function (e) {
        if (e.key === "Escape") {
          const modal = document.getElementById("editModal");
          if (modal && !modal.classList.contains("hidden")) {
            window.closeEditModal();
          }
        }
      });
    </script>
  </body>
</html>
