---
import { getUserById, getSerieBySlug } from "../lib/mongo";
import { getPublicAuthUser } from "../lib/publicAuth";
import ResponsiveNav from "../components/ResponsiveNav.astro";
import "../styles/global.css";

// Verificar autenticaci√≥n
const currentUser = getPublicAuthUser(Astro.request);
if (!currentUser) {
  return Astro.redirect("/user-login");
}

// Obtener datos del usuario
const userData = await getUserById(currentUser.id);
if (!userData) {
  return Astro.redirect("/user-login");
}

// Obtener las series de la watchlist
const watchlistSeries = [];
if (userData.watchlistSeries && userData.watchlistSeries.length > 0) {
  for (const slug of userData.watchlistSeries) {
    try {
      const serie = await getSerieBySlug(slug);
      if (serie) {
        watchlistSeries.push(serie);
      }
    } catch (error) {
      console.error(`Error obteniendo serie ${slug}:`, error);
    }
  }
}
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mi Lista - SeriesGuide</title>
    <meta
      name="description"
      content="Tu lista personal de series guardadas para ver m√°s tarde."
    />
  </head>
  <body class="bg-gray-50">
    <!-- Navigation -->
    <ResponsiveNav />

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div class="mb-8">
        <h1 class="text-4xl font-bold text-gray-800 mb-2">üîñ Mi Lista</h1>
        <p class="text-gray-600 text-lg">
          Series que has guardado para ver m√°s tarde ({watchlistSeries.length} series)
        </p>
      </div>

      {/* Series Grid */}
      {watchlistSeries.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {watchlistSeries.map((serie) => (
            <article class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-[1.02] overflow-hidden group">
              {/* Poster */}
              <div class="relative h-64 bg-gray-200">
                {serie.posterUrl ? (
                  <img 
                    src={serie.posterUrl}
                    alt={serie.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                  />
                ) : (
                  <div class="w-full h-full flex items-center justify-center text-gray-400">
                    <span class="text-6xl">üé¨</span>
                  </div>
                )}
                
                {/* Status Badge */}
                <div class={`absolute top-3 right-3 px-3 py-1 rounded-full text-sm font-medium shadow-lg text-white ${
                  serie.status === 'ongoing' ? 'bg-green-500' : 
                  serie.status === 'ended' ? 'bg-gray-500' : 'bg-red-500'
                }`}>
                  {serie.status === 'ongoing' ? 'En emisi√≥n' : 
                   serie.status === 'ended' ? 'Finalizada' : 'Cancelada'}
                </div>
                
                {/* IMDB Rating */}
                <div class="absolute top-3 left-3 bg-yellow-400 text-black px-3 py-1 rounded-full text-sm font-bold shadow-lg">
                  ‚≠ê {serie.imdbRating}
                </div>

                {/* Remove Button */}
                <div class="absolute bottom-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <button
                    onclick={`removeFromWatchlist('${serie.slug}')`}
                    class="p-2 bg-red-500 text-white rounded-full shadow-lg hover:bg-red-600 transition-colors"
                    title="Quitar de mi lista"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>

              {/* Content */}
              <div class="p-6">
                <div class="mb-3">
                  <h3 class="text-xl font-bold text-gray-800 mb-1 line-clamp-2">
                    <a href={`/series/${serie.slug}`} class="hover:text-blue-600 transition-colors">
                      {serie.title}
                    </a>
                  </h3>
                  <p class="text-sm text-gray-600">{serie.network} ‚Ä¢ {serie.startYear}{serie.endYear ? `-${serie.endYear}` : ''}</p>
                </div>

                {/* Genres */}
                <div class="flex flex-wrap gap-2 mb-4">
                  {serie.genre.slice(0, 3).map((g) => (
                    <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-medium">
                      {g}
                    </span>
                  ))}
                  {serie.genre.length > 3 && (
                    <span class="text-xs text-gray-500 px-2 py-1">
                      +{serie.genre.length - 3} m√°s
                    </span>
                  )}
                </div>

                {/* Description */}
                <p class="text-gray-600 text-sm mb-4 line-clamp-3">
                  {serie.description}
                </p>

                <!-- Action Buttons -->
                <div class="flex gap-2">
                  <a 
                    href={`/series/${serie.slug}`}
                    class="flex-1 text-center bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors"
                  >
                    Ver Serie
                  </a>
                  <button
                    class={`border-2 p-3 rounded-lg transition-all duration-200 min-w-[48px] flex items-center justify-center hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed ${
                      userData.favoritesSeries?.includes(serie.slug) 
                        ? 'bg-red-500 border-red-500 text-white' 
                        : 'border-red-500 text-red-500 hover:bg-red-50'
                    }`}
                    data-serie={serie.slug}
                    data-action={userData.favoritesSeries?.includes(serie.slug) ? 'remove' : 'add'}
                    onclick="toggleFavorite(this)"
                    title={userData.favoritesSeries?.includes(serie.slug) ? 'Quitar de Favoritos' : 'Agregar a Favoritos'}
                  >
                    ‚ù§Ô∏è
                  </button>
                </div>
              </div>
            </article>
          ))}
        </div>
      ) : (
        <!-- Empty State -->
        <div class="text-center py-16">
          <div class="text-8xl mb-6">üîñ</div>
          <h3 class="text-2xl font-semibold text-gray-600 mb-4">
            Tu lista est√° vac√≠a
          </h3>
          <p class="text-gray-500 mb-8 max-w-md mx-auto">
            Guarda series que quieras ver m√°s tarde haciendo clic en el icono de marcador üîñ en cualquier serie.
          </p>
          <a 
            href="/"
            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
            </svg>
            Explorar Series
          </a>
        </div>
      )}
    </main>

    <!-- Script para quitar de la lista -->
    <script define:vars={{ }}>
      function removeFromWatchlist(serieSlug) {
        return fetch('/api/watchlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'same-origin',
          body: JSON.stringify({
            serieSlug: serieSlug,
            action: 'remove'
          })
        })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            return response.json().then(error => {
              throw new Error(error.error || 'Error desconocido');
            });
          }
        })
        .then(result => {
          if (result.success) {
            // Recargar la p√°gina para actualizar la lista
            window.location.reload();
          } else {
            alert('Error al quitar de la lista: ' + result.error);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error de conexi√≥n: ' + error.message);
        });
      }

      // Funci√≥n para manejar favoritos
      async function toggleFavorite(button) {
        if (button.disabled) return;

        button.disabled = true;

        try {
          const serieSlug = button.dataset.serie;
          const action = button.dataset.action;

          const response = await fetch("/api/favorites", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "same-origin",
            body: JSON.stringify({ serieSlug, action }),
          });

          if (response.ok) {
            const result = await response.json();
            if (result.success) {
              // Actualizar el bot√≥n seg√∫n la acci√≥n
              if (action === "add") {
                button.className = "border-2 bg-red-500 border-red-500 text-white p-3 rounded-lg transition-all duration-200 min-w-[48px] flex items-center justify-center hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed";
                button.dataset.action = "remove";
                button.title = "Quitar de Favoritos";
              } else {
                button.className = "border-2 border-red-500 text-red-500 hover:bg-red-50 p-3 rounded-lg transition-all duration-200 min-w-[48px] flex items-center justify-center hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed";
                button.dataset.action = "add";
                button.title = "Agregar a Favoritos";
              }
            } else {
              alert("Error al actualizar favoritos: " + result.error);
            }
          } else {
            const error = await response.json();
            alert("Error: " + error.error);
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Error de conexi√≥n");
        } finally {
          button.disabled = false;
        }
      }
    </script>
  </body>
</html>
