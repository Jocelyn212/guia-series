---
import SerieCard from "../../components/SerieCard";
import FullAnalysisCard from "../../components/FullAnalysisCard";
import ResponsiveNav from "../../components/ResponsiveNav.astro";
import {
  getSerieBySlug,
  getAnalisisBySerie,
  getUserById,
  type User,
} from "../../lib/mongo";
import { getPublicAuthUser } from "../../lib/publicAuth";
import "../../styles/global.css";

// En modo server, no necesitamos getStaticPaths
// Las rutas se manejan din√°micamente

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect("/404");
}

const serie = await getSerieBySlug(slug);
const analisis = await getAnalisisBySerie(slug);

if (!serie) {
  return Astro.redirect("/404");
}

// Obtener usuario autenticado y sus datos
const currentUser = getPublicAuthUser(Astro.request);
let userData: User | null = null;
if (currentUser) {
  userData = await getUserById(currentUser.id);
}
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{serie.title} - An√°lisis | SeriesGuide</title>
    <meta
      name="description"
      content={`An√°lisis detallados de ${serie.title}. ${serie.description}`}
    />
  </head>
  <body class="bg-gray-50">
    <!-- Navigation -->
    <ResponsiveNav />

    <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Serie Header */}
      <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-8">
        <div class="md:flex">
          <div class="md:w-1/3">
            {
              serie.posterUrl ? (
                <img
                  src={serie.posterUrl}
                  alt={serie.title}
                  class="w-full h-64 md:h-full object-cover"
                />
              ) : (
                <div class="w-full h-64 md:h-full bg-gray-200 flex items-center justify-center">
                  <span class="text-6xl">üé¨</span>
                </div>
              )
            }
          </div>
          <div class="md:w-2/3 p-8">
            <div class="flex items-center gap-4 mb-4">
              <h1 class="text-3xl font-bold text-gray-800">{serie.title}</h1>
              <span
                class="bg-yellow-400 text-black px-3 py-1 rounded-full text-sm font-bold"
              >
                ‚≠ê {serie.imdbRating}
              </span>
            </div>

            <div class="flex flex-wrap gap-2 mb-4">
              {
                serie.genre.map((g) => (
                  <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-sm font-medium">
                    {g}
                  </span>
                ))
              }
            </div>

            <p class="text-gray-600 mb-4">{serie.description}</p>

            <div class="grid grid-cols-2 gap-4 text-sm text-gray-600 mb-4">
              <div><strong>Red:</strong> {serie.network}</div>
              <div>
                <strong>A√±os:</strong>
                {serie.startYear}{serie.endYear ? `-${serie.endYear}` : ""}
              </div>
              <div><strong>Temporadas:</strong> {serie.totalSeasons}</div>
              <div><strong>Episodios:</strong> {serie.totalEpisodes}</div>
            </div>

            <div class="mb-4">
              <p class="text-sm text-gray-500 mb-2">Disponible en:</p>
              <div class="flex flex-wrap gap-2">
                {
                  serie.platforms.map((platform) => (
                    <span
                      class={`px-3 py-1 rounded-md text-sm font-medium ${
                        platform.isPremium
                          ? "bg-purple-100 text-purple-800"
                          : "bg-green-100 text-green-800"
                      }`}
                    >
                      {platform.name}
                      {platform.isPremium && " üíé"}
                    </span>
                  ))
                }
              </div>
            </div>

            {/* Bot√≥n de trailer si existe */}
            {
              serie.trailerUrl && (
                <div class="mb-4">
                  <button
                    id="trailerBtn"
                    class="flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white px-4 py-3 rounded-lg font-medium text-sm transition-all duration-200 hover:-translate-y-0.5"
                    data-trailer={serie.trailerUrl}
                  >
                    <span class="text-base">üé¨</span>
                    <span>Ver Trailer</span>
                  </button>
                </div>
              )
            }

            {/* Bot√≥n de favoritos solo para usuarios autenticados */}
            {
              currentUser && (
                <div class="mb-4">
                  <button
                    id="favoriteBtn"
                    class={`flex items-center gap-2 border-2 transition-all duration-200 px-4 py-3 rounded-lg font-medium text-sm hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed ${
                      userData?.favoritesSeries.includes(serie.slug)
                        ? "border-red-500 bg-red-500 text-white"
                        : "border-gray-300 text-gray-600 hover:border-red-500 hover:text-red-500"
                    }`}
                    data-serie={serie.slug}
                    data-action={
                      userData?.favoritesSeries.includes(serie.slug)
                        ? "remove"
                        : "add"
                    }
                  >
                    <span class="text-base">
                      {userData?.favoritesSeries.includes(serie.slug)
                        ? "‚ù§Ô∏è"
                        : "ü§ç"}
                    </span>
                    <span>
                      {userData?.favoritesSeries.includes(serie.slug)
                        ? "En Favoritos"
                        : "Agregar a Favoritos"}
                    </span>
                  </button>
                </div>
              )
            }
          </div>
        </div>
      </div>

      {/* An√°lisis Section */}
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">
          An√°lisis de {serie.title}
        </h2>
        <p class="text-gray-600 mb-6">
          An√°lisis detallados de episodios, teor√≠as y interpretaciones de esta
          serie.
        </p>

        {
          analisis.length > 0 ? (
            <div class="space-y-8">
              {analisis.map((item) => (
                <FullAnalysisCard
                  client:load
                  title={item.title}
                  excerpt={item.excerpt}
                  content={item.content}
                  universe={item.universe || "blue"}
                  author={item.author}
                  readTime={item.readTime}
                  views={item.views}
                  likes={item.likes}
                  publishedAt={item.publishedAt}
                  slug={item.slug}
                  isAuthenticated={!!currentUser}
                  hasUserLiked={false}
                />
              ))}
            </div>
          ) : (
            <div class="text-center py-12 bg-white rounded-lg">
              <div class="text-6xl mb-4">üìù</div>
              <h3 class="text-xl font-semibold text-gray-600 mb-2">
                An√°lisis pr√≥ximamente
              </h3>
              <p class="text-gray-500">
                Estamos preparando an√°lisis detallados de {serie.title}. ¬°Vuelve
                pronto!
              </p>
            </div>
          )
        }
      </div>
    </main>

    {/* Footer */}
    <footer class="bg-gray-800 text-white mt-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="text-center">
          <p>
            &copy; 2024 SeriesGuide. An√°lisis profesional de series de
            televisi√≥n.
          </p>
        </div>
      </div>
    </footer>

    <script is:inline>
      const favoriteBtn = document.getElementById("favoriteBtn");

      if (favoriteBtn) {
        favoriteBtn.addEventListener("click", async function () {
          if (this.disabled) return;

          this.disabled = true;

          try {
            const serieSlug = this.dataset.serie;
            const action = this.dataset.action;

            const response = await fetch("/api/favorites", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              credentials: "same-origin", // Esto incluye las cookies
              body: JSON.stringify({ serieSlug, action }),
            });

            if (response.ok) {
              const result = await response.json();
              if (result.success) {
                // Actualizar UI
                const isAdding = action === "add";
                this.dataset.action = isAdding ? "remove" : "add";

                const icon = this.querySelector("span:first-child");
                const text = this.querySelector("span:last-child");

                if (isAdding) {
                  // Cambiar a estado favorito
                  this.className = this.className.replace(
                    "border-gray-300 text-gray-600 hover:border-red-500 hover:text-red-500",
                    "border-red-500 bg-red-500 text-white"
                  );
                  if (icon) icon.textContent = "‚ù§Ô∏è";
                  if (text) text.textContent = "En Favoritos";
                } else {
                  // Cambiar a estado no favorito
                  this.className = this.className.replace(
                    "border-red-500 bg-red-500 text-white",
                    "border-gray-300 text-gray-600 hover:border-red-500 hover:text-red-500"
                  );
                  if (icon) icon.textContent = "ü§ç";
                  if (text) text.textContent = "Agregar a Favoritos";
                }
              } else {
                alert("Error al actualizar favoritos: " + result.error);
              }
            } else {
              const error = await response.json();
              alert("Error: " + error.error);
            }
          } catch (error) {
            console.error("Error:", error);
            alert("Error de conexi√≥n");
          } finally {
            this.disabled = false;
          }
        });
      }

      // Funcionalidad del trailer
      const trailerBtn = document.getElementById("trailerBtn");
      if (trailerBtn) {
        trailerBtn.addEventListener("click", function () {
          const trailerUrl = this.dataset.trailer;
          if (trailerUrl) {
            openTrailerModal(trailerUrl);
          }
        });
      }

      // Funciones para el modal del trailer
      function openTrailerModal(url) {
        let videoId = "";

        // Extraer ID del video de YouTube
        if (url.includes("youtube.com/watch?v=")) {
          videoId = url.split("v=")[1].split("&")[0];
        } else if (url.includes("youtu.be/")) {
          videoId = url.split("youtu.be/")[1].split("?")[0];
        }

        if (videoId) {
          const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&modestbranding=1&rel=0`;

          // Crear modal
          const modal = document.createElement("div");
          modal.id = "trailerModal";
          modal.className =
            "fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 p-4";
          modal.innerHTML = `
            <div class="relative bg-white rounded-lg overflow-hidden max-w-4xl w-full max-h-[90vh]">
              <div class="flex justify-between items-center p-4 bg-gray-900 text-white">
                <h3 class="text-lg font-semibold">üé¨ Trailer</h3>
                <button id="closeTrailerModal" class="text-gray-300 hover:text-white">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              <div class="aspect-video">
                <iframe
                  src="${embedUrl}"
                  class="w-full h-full"
                  frameborder="0"
                  allowfullscreen
                  allow="autoplay; encrypted-media"
                ></iframe>
              </div>
            </div>
          `;

          document.body.appendChild(modal);

          // Prevenir scroll del body
          document.body.style.overflow = "hidden";

          // Cerrar modal
          const closeBtn = modal.querySelector("#closeTrailerModal");
          function closeModal() {
            modal.remove();
            document.body.style.overflow = "";
          }

          closeBtn.addEventListener("click", closeModal);

          // Cerrar al hacer clic fuera del modal
          modal.addEventListener("click", function (e) {
            if (e.target === modal) {
              closeModal();
            }
          });

          // Cerrar con Escape
          document.addEventListener("keydown", function (e) {
            if (e.key === "Escape" && document.getElementById("trailerModal")) {
              closeModal();
            }
          });
        } else {
          // Si no es un video de YouTube, abrir en nueva ventana
          window.open(url, "_blank");
        }
      }
    </script>
  </body>
</html>
