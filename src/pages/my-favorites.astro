---
import { getPublicAuthUser } from "../lib/publicAuth";
import { getUserById, getSeries } from "../lib/mongo";
import "../styles/global.css";
import UserNav from "../components/UserNav.astro";

// Verificar autenticaci√≥n
const currentUser = getPublicAuthUser(Astro.request);
if (!currentUser) {
  return Astro.redirect("/user-login");
}

// Obtener datos completos del usuario
const userData = await getUserById(currentUser.id);
if (!userData) {
  return Astro.redirect("/user-login");
}

// Obtener todas las series para filtrar favoritos
const allSeries = await getSeries();
const favoriteSeries = allSeries.filter((serie) =>
  userData.favoritesSeries.includes(serie.slug)
);
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mis Favoritos - SeriesGuide</title>
  </head>
  <body class="bg-gray-50">
    {/* Navigation */}
    <nav class="bg-white shadow-md">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <a href="/" class="text-xl font-bold text-slate-700"
              >üì∫ SeriesGuide</a
            >
          </div>
          <div class="flex items-center space-x-4">
            <a
              href="/"
              class="text-gray-600 hover:text-slate-700 transition-colors"
              >Series</a
            >
            <a
              href="/analisis"
              class="text-gray-600 hover:text-slate-700 transition-colors"
              >An√°lisis</a
            >

            <UserNav />
          </div>
        </div>
      </div>
    </nav>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-slate-700 mb-4">
          ‚ù§Ô∏è Mis Series Favoritas
        </h1>
        <p class="text-gray-600 text-lg">
          Aqu√≠ est√°n todas las series que has marcado como favoritas
        </p>
      </div>

      {
        favoriteSeries.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {favoriteSeries.map((serie) => (
              <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
                <div class="aspect-[2/3] relative">
                  {serie.posterUrl ? (
                    <img
                      src={serie.posterUrl}
                      alt={serie.title}
                      class="w-full h-full object-cover"
                    />
                  ) : (
                    <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                      <span class="text-6xl">üé¨</span>
                    </div>
                  )}
                  <div class="absolute top-2 right-2">
                    <span class="bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                      ‚ù§Ô∏è Favorita
                    </span>
                  </div>
                </div>

                <div class="p-4">
                  <h3 class="font-bold text-lg text-gray-800 mb-2">
                    {serie.title}
                  </h3>
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm text-gray-600">{serie.startYear}</span>
                    <span class="bg-yellow-400 text-black px-2 py-1 rounded text-xs font-bold">
                      ‚≠ê {serie.imdbRating}
                    </span>
                  </div>

                  <div class="flex flex-wrap gap-1 mb-3">
                    {serie.genre.slice(0, 2).map((g) => (
                      <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                        {g}
                      </span>
                    ))}
                  </div>

                  <p
                    class="text-gray-600 text-sm mb-3 overflow-hidden"
                    style="display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical;"
                  >
                    {serie.description}
                  </p>

                  <div class="flex gap-2">
                    <a
                      href={`/series/${serie.slug}`}
                      class="flex-1 bg-slate-700 text-white text-center py-2 px-3 rounded-md hover:bg-slate-800 transition-colors text-sm font-medium"
                    >
                      Ver Detalles
                    </a>
                    <button
                      class="border-2 bg-red-500 border-red-500 text-white p-2 rounded-md transition-all duration-200 min-w-[40px] flex items-center justify-center hover:-translate-y-0.5 disabled:opacity-60 disabled:cursor-not-allowed"
                      data-serie={serie.slug}
                      data-action="remove"
                      onclick="toggleFavorite(this)"
                      title="Quitar de favoritos"
                    >
                      ‚ù§Ô∏è
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div class="text-center py-16">
            <div class="text-6xl mb-4">üíî</div>
            <h2 class="text-2xl font-bold text-gray-600 mb-4">
              No tienes favoritos a√∫n
            </h2>
            <p class="text-gray-500 mb-6">
              Explora nuestras series y marca tus favoritas para verlas aqu√≠
            </p>
            <a
              href="/"
              class="bg-slate-700 text-white px-6 py-3 rounded-md hover:bg-slate-800 transition-colors font-medium"
            >
              Explorar Series
            </a>
          </div>
        )
      }
    </main>

    <script>
      async function toggleFavorite(button: HTMLButtonElement) {
        if (button.disabled) return;

        button.disabled = true;

        try {
          const serieSlug = button.dataset.serie;
          const action = button.dataset.action;

          const response = await fetch("/api/favorites", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "same-origin", // Incluir cookies
            body: JSON.stringify({ serieSlug, action }),
          });

          if (response.ok) {
            const result = await response.json();
            if (result.success) {
              // Si se est√° removiendo de favoritos en esta p√°gina, ocultar el elemento
              if (action === "remove") {
                const card = button.closest(".bg-white") as HTMLElement;
                if (card) {
                  card.style.opacity = "0.5";
                  card.style.transform = "scale(0.95)";
                  setTimeout(() => {
                    card.remove();
                    // Verificar si ya no hay favoritos y mostrar mensaje
                    const remaining = document.querySelectorAll(
                      ".bg-white.rounded-xl"
                    ).length;
                    if (remaining === 1) {
                      // El que acabamos de eliminar
                      location.reload();
                    }
                  }, 300);
                }
              }
            } else {
              alert("Error al actualizar favoritos: " + result.error);
            }
          } else {
            const error = await response.json();
            alert("Error: " + error.error);
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Error de conexi√≥n");
        } finally {
          button.disabled = false;
        }
      }

      // Hacer la funci√≥n global
      (window as any).toggleFavorite = toggleFavorite;
    </script>
  </body>
</html>
